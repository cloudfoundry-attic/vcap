#Worklist
---------

**Currrent

-finish pip support in server.
-add pip support to load tester.
-add README and rest of pat's comments.


-Add warning around spec that requires root - or create
*_sudo_spec.rb spec's.

-write in the comments why we do a secure import entry, why
 simply doing a copy is hard to reason about, and why
 we want to go through the file system -i.e. why the inbox
 for native gems.

-deal with XXX's
-check unit tests are complete.
-have unit tests check file permissions

-load testing for local gems.

#BUGS
----

-kind of nasty bug in inbox -- since file name is defined by content, user
could deny ability of another user to add a local gem by creating place holder
files that fill in the inbox. one way to solve this -- which is a gross hack
but will work, is by appending a secure nonce to the front of the file,
then renaming into an imports directory on the secure import and dropping
the nonce.

-another inbox consideration is ensuring that files do not linger in the inbox.
a per-user storage quota should at least provide an upper bound on space consumed,
a periodic cleaning of the inbox (say of files who have been there over some short
fixed interval (say 2 minutes) might also be a good measure.

-sometimes gem downloads failing, investigate and better error reporting
on download fails perhaps.

#MUST HAVE
---------

-add some error handling, i.e. error type, error code, error message stuff.
 -couldn't find/download gem error.
 -couldn't build gem error.
 -gem in cache, not error, just return immediately.

-no error handling in client.
  -add support
  -put in some tests

-improve documentation on inbox permission settings.

#CLEANUP
-------

-fixup wonky or excessive include lines.

-incorporate matt's logger.

-rename get_gem_path => get_path


-User pools/UserOps.
  -UserOps spec is ghetto, rewrite using nested example groups. (see chap 12 rspec
  book).

  -check to make sure unit tests complete.
  -do unit tests for process kill stuff.

#SHOULD HAVE
#-----------

-put in protection from massive gems being downloaded, have
 limit set in config file, enforced in async fetch.
-ulimits from dea for run_restricted.
-watch dog timer for run_restricted.

-add back pressure when we hit a limit on number of outstanding requests, stager
can back off and retry.

#OTHER FEATURES
--------------

-allow inbox copy to be replaced with a rename e.g. import_method = :rename

-better sandboxing.



#Later
-pip support is currently fragile because pip's can have different names on the server side -- ugghhh...
prolly the thing to do is move away from design that uses seperate downloading stage, to unified
downloading and building -- don't need to do this till we actually need to fully support pip's.

-stop using fixed offsets for user_pools, just install/remove users.

-think about fs_cleaner_daemon for inbox, among other things, or just add
 some inbox cleaner to prevent resource leaks - prolly cleaner thread
 type thing.

-change debug formatter to say method() instead of `in method`

-refactor everything containing a purge! method, should have a file_store
class that they inherit from, gem_builder could also potentially inherit
from this?  (decide if there is enough commonality to justify this?)


#PRolly NEVER
#-----
-command line tool to exercise client library and make testing easy.
-create gem_builder that managers user pool itself.
