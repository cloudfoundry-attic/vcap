#!/bin/bash
# Copyright (c) 2011 VMware, Inc.
# Install vcap components on Ubuntu systems.

usage() {
cat <<EOF
usage: $0 options

OPTIONS:
  -h           Show this message
  -a           Answer yes to all questions
  -p           http proxy i.e. -p http://username:password@host:port/
  -c           deployment config
  -d           cloudfoundry home
  -D           cloudfoundry domain (default: vcap.me)
  -r           cloud foundry repo
  -b           cloud foundry repo branch/tag/SHA
EOF
}

function run_cmd () {
  if [ -z "$PROXY" ]; then
    sudo $*
  else
    sudo env http_proxy=$PROXY $*
  fi
}

function clear_bundler_settings () {
  # Do we have a Bundler problem?
  find $CLOUDFOUNDRY_HOME/vcap -type d -name .bundle | grep -Fq .bundle || return 0
  if [ "$ALL" != true ]; then
    read -p "Remembered Bundler options could cause you troubles, do you want me to clear them for you? [Y/n]"
    [[ $REPLY =~ ^[nN] ]] && return 0
  fi
  (cd $CLOUDFOUNDRY_HOME/vcap && find -type d -name .bundle -prune -exec rm -r {} \; )
}

RUBY="/usr/bin/ruby"
GEM="/usr/bin/gem"
APT_CONFIG="-o Acquire::http::No-Cache=True -o Acquire::BrokenProxy=true -o Acquire::Retries=3"

if [ -n "$http_proxy" ]; then
  if [ -z "$https_proxy" ]; then
    echo "Please set https_proxy env variable."
    exit 1
  fi
  PROXY=$http_proxy
fi

while getopts "had:p:c:D:r:b:" OPTION
do
  case $OPTION in
    h)
      usage
      exit 1
      ;;
    a)
      ALL=true
      ;;
    c)
      CONFIG_FILE=$OPTARG
      ;;
    d)
      CLOUDFOUNDRY_HOME=$OPTARG
      ;;
    D)
      CLOUDFOUNDRY_DOMAIN=$OPTARG
      ;;
    r)
      VCAP_REPO=$OPTARG
      ;;
    b)
      VCAP_REPO_BRANCH=$OPTARG
      ;;
    p)
      PROXY=$OPTARG
      export http_proxy=$PROXY
      export https_proxy=$PROXY
  esac
done

if [ -z "$CLOUDFOUNDRY_HOME" ]; then
  CLOUDFOUNDRY_HOME=~/cloudfoundry
fi

if [ -z "$CLOUDFOUNDRY_DOMAIN" ]; then
  CLOUDFOUNDRY_DOMAIN=vcap.me
fi

if [ -z "$VCAP_REPO" ]; then
  VCAP_REPO=https://github.com/cloudfoundry/vcap.git
fi

if [ -z "$VCAP_REPO_BRANCH" ]; then
  VCAP_REPO_BRANCH=master
fi

# Check if we have access to the web
echo "Installing wget..."
run_cmd apt-get $APT_CONFIG install -qym wget > /dev/null
if [ $? -ne 0 ]; then
  echo "Can't install prerequisite: wget"
  exit 1
fi

which wget > /dev/null
if [ $? -eq 0 ]; then
  echo "Checking web connectivity..."
  wget -q -T 5 -t 2 -O - http://api.cloudfoundry.com/info | grep "Cloud Application Platform" > /dev/null
  if [ $? -ne 0 ]; then
    echo "Giving up. Cannot connect to the web. Check your proxy settings if you are behind a proxy."
    exit 1
  fi
fi

# Install chef
for utility in ruby ruby-dev libopenssl-ruby rdoc ri irb build-essential ssl-cert
do
  echo "Installing ${utility}..."
  run_cmd apt-get $APT_CONFIG install -qym ${utility} > /dev/null
  if [ $? -ne 0 ]; then
    echo "Can't install prerequisit: ${utility}"
    exit 1
  fi
done

if [ ! -f ${GEM} ] || [ `${GEM} -v` \< "1.3.6" ]; then
  # Blobstore_client requires gem >= 1.3.6
  echo "Installing rubygems..."
  CWD=`pwd`
  cd /tmp
  wget -q http://production.cf.rubygems.org/rubygems/rubygems-1.3.6.tgz
  tar zxf rubygems-1.3.6.tgz
  cd rubygems-1.3.6
  sudo ${RUBY} setup.rb --no-format-executable > /dev/null
  cd ${CWD}
fi

${GEM} list chef -i > /dev/null
if [ $? -ne 0 ]; then
  echo "Installing chef..."
  sudo ${GEM} install chef -q --no-ri --no-rdoc > /dev/null
fi

# Install blobstore_client
${GEM} list blobstore_client -i > /dev/null
if [ $? -ne 0 ]; then
  echo "Installing blobstore_client..."
  sudo ${GEM} install blobstore_client -q --no-ri --no-rdoc > /dev/null
fi

# Install rake
${GEM} list rake -i > /dev/null
if [ $? -ne 0 ]; then
  echo "Installing rake..."
  sudo ${GEM} install rake -q --no-ri --no-rdoc > /dev/null
fi

# Clone cloudfoundry repo
echo "Installing git..."
run_cmd apt-get $APT_CONFIG install -qym git-core > /dev/null

[ -d $CLOUDFOUNDRY_HOME ] || mkdir $CLOUDFOUNDRY_HOME
if [ ! -d $CLOUDFOUNDRY_HOME/vcap ]; then
  echo ""
  echo "Creating cloudfoundry repo..."
  (cd $CLOUDFOUNDRY_HOME && git clone $VCAP_REPO && cd vcap && git submodule update --init && git checkout $VCAP_REPO_BRANCH)
  if [ $? -ne 0 ]; then
    echo "Unable to clone cloudfoundry repo."
    exit 1
  fi
else
  clear_bundler_settings
fi

# Launch chef
ARGS=""
if [ -n "$CLOUDFOUNDRY_HOME" ]; then
  ARGS="-d $CLOUDFOUNDRY_HOME"
fi

if [ -n "$CLOUDFOUNDRY_DOMAIN" ]; then
  ARGS="$ARGS -D $CLOUDFOUNDRY_DOMAIN"
fi

if [ -n "$CONFIG_FILE" ]; then
  ARGS="$ARGS -c $CONFIG_FILE"
fi

echo ""
echo "Lanching chef..."
sleep 3
$CLOUDFOUNDRY_HOME/vcap/dev_setup/lib/chefsolo_launch.rb $ARGS
