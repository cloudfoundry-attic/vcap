#!/usr/bin/env ruby
#
require 'erb'
require 'json'
require 'fileutils'
require 'optparse'
require File.expand_path('vcap_defs', File.dirname(__FILE__))

script_dir = File.expand_path(File.dirname(__FILE__))

# TODO: Once we integrate better with bin/vcap, this option parsing should
# become more robust
options = {"name" => DEPLOYMENT_DEFAULT_NAME}
opts = OptionParser.new do |opts|
  opts.banner = "Usage: #{$0} [--deployment name] [--home deployment_home] [start|stop|restart|tail|status] [COMPONENT] [--no-color] [--config CONFIGDIR]"
  opts.on("-d", "--deployment name", "Name of the deployment") do |n|
    options["name"] = n.to_s
  end
  opts.on("-h", "--home path", "Home directory of the deployment") do |n|
    options["home"] = n.to_s
  end
end
opts.order!(ARGV)

if ARGV[0].nil? || !%w[start stop restart tail status].include?(ARGV[0].downcase)
    STDERR.puts "Usage: #{$0} [--deployment name] [--home deployment_home] [start|stop|restart|tail|status] [COMPONENT] [--no-color] [--config CONFIGDIR]"
    exit 1
end

if options["home"].nil?
  deployment_home = Deployment.get_home(options["name"])
else
  deployment_home = options["home"]
end

deployment_cfg_path = Deployment.get_config_path(deployment_home)

begin
  cfg = JSON.parse(File.read(Deployment.get_cfg_file(deployment_cfg_path)))
rescue => e
  STDERR.puts "Could not parse deployment config file #{Deployment.get_cfg_file(deployment_cfg_path)}. Please specify the deployment name or the deployment home directory where to find the config file"
  exit 1
end

if cfg["cloudfoundry"].nil? || cfg["cloudfoundry"]["path"].nil?
  vcap_dir = File.expand_path(File.join(script_dir, "../.."))
else
  vcap_dir = cfg["cloudfoundry"]["path"]
end
staging_config_dir = File.join(deployment_cfg_path, "staging")

unless File.exists?("#{vcap_dir}/bin/vcap")
  puts "Cannot find vcap repo. Please specify the deployment name or the deployment home directory where to find the config file"
  exit 1
end

ruby_path = "#{cfg["ruby"]["path"]}/bin"
gemdir = `#{ruby_path}/gem environment gemdir`.split("\n")[0]

ENV["PATH"] = "#{ruby_path}:#{gemdir}/bin:#{ENV["PATH"]}"

# Set both http_proxy and HTTP_PROXY
%w(http_proxy https_proxy no_proxy).each do |var|
  ENV[var] = ENV[var] || ENV[var.upcase] unless ENV[var.upcase].nil?
  ENV[var.upcase] = ENV[var.upcase] || ENV[var] unless ENV[var].nil?
end

def exec_cmd(cmd)
  id = fork {
    puts "Executing #{cmd}"
    exec(cmd)
  }
  pid, status = Process.waitpid2(id)
  status.exitstatus
end

cmd = nil
case ARGV[0].upcase
when "START"
  if !ARGV.include?("-c") && !ARGV.include?("--config")
    puts "Using cloudfoundry config from #{deployment_cfg_path}"
    exec_cmd("#{ruby_path}/ruby #{vcap_dir}/bin/vcap #{ARGV.join(" ")} -c #{deployment_cfg_path}")
  else
    exec_cmd("#{ruby_path}/ruby #{vcap_dir}/bin/vcap #{ARGV.join(" ")}")
  end
else
  exec_cmd("#{ruby_path}/ruby #{vcap_dir}/bin/vcap #{ARGV.join(" ")}")
end
