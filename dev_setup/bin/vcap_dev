#!/usr/bin/env ruby
#
require 'erb'
require 'json'
require 'fileutils'
require 'optparse'
require File.expand_path(File.join("..", "lib", "vcap_defs"), File.dirname(__FILE__))

script_dir = File.expand_path(File.dirname(__FILE__))

# TODO: Once we integrate better with bin/vcap, this option parsing should
# become more robust
options = {"name" => DEPLOYMENT_DEFAULT_NAME}
opts = OptionParser.new do |opts|
  opts.banner = "Usage: #{$0} [--deployment name] [--home deployment_home] [start|stop|restart|tail|status]"
  opts.on("-d", "--deployment name", "Name of the deployment") do |n|
    options["name"] = n
  end
  opts.on("-h", "--home path", "Home directory of the deployment") do |n|
    options["home"] = n
  end
end
opts.order!(ARGV)

if ARGV[0].nil? || !%w[start stop restart tail status].include?(ARGV[0].downcase)
    STDERR.puts "Usage: #{$0} [--deployment name] [--home deployment_home] [start|stop|restart|tail|status]"
    exit 1
end

deployment_home = options["home"] || Deployment.get_home(options["name"])
deployment_config_path = Deployment.get_config_path(deployment_home)

begin
  vcap_components = JSON.parse(File.read(Deployment.get_vcap_config_file(deployment_config_path)))
  deployment_info = JSON.parse(File.read(Deployment.get_deployment_info_file(deployment_config_path)))
rescue => e
  STDERR.puts "#{e.inspect}. Could not parse deployment config files . Please check your deployment."
  exit 1
end

unless File.exists?(File.join(deployment_info["cloudfoundry_path"], "bin", "vcap"))
  puts "Cannot find vcap repo. Please specify the deployment name or the deployment home directory where to find the config file"
  exit 1
end

ruby_bin_dir = deployment_info["ruby_bin_dir"]
gemdir = `#{File.join(ruby_bin_dir, "gem")} environment gemdir`.split("\n")[0]
ENV["PATH"] = "#{ruby_bin_dir}:#{File.join(gemdir, "bin")}:#{ENV["PATH"]}"

if vcap_components["components"].include?("cloud_controller")
  puts "Setting up cloud controller environment"
  ENV["CLOUD_CONTROLLER_CONFIG"]="#{deployment_config_path}/cloud_controller.yml"
  ENV["RAILS_ENV"]="production"
end

# Set both http_proxy and HTTP_PROXY
%w(http_proxy https_proxy no_proxy).each do |var|
  ENV[var] = ENV[var] || ENV[var.upcase] unless ENV[var.upcase].nil?
  ENV[var.upcase] = ENV[var.upcase] || ENV[var] unless ENV[var].nil?
end

def exec_cmd(cmd)
  id = fork {
    puts "Executing #{cmd}"
    exec(cmd)
  }
  pid, status = Process.waitpid2(id)
  status.exitstatus
end

ruby_binary = File.join(ruby_bin_dir, "ruby")
cloudfoundry_bin_path = File.join(deployment_info["cloudfoundry_path"], "bin")
vcap_binary = File.join(script_dir, "vcap")

case ARGV[0].upcase
when "START"
  puts "Using cloudfoundry config from #{deployment_config_path}"
  exec_cmd("#{ruby_binary} #{vcap_binary} start #{vcap_components["components"].join(" ")} -c #{deployment_config_path} -v #{cloudfoundry_bin_path}")
else
  exec_cmd("#{ruby_binary} #{vcap_binary} #{ARGV.join(" ")} -v #{cloudfoundry_bin_path}")
end
