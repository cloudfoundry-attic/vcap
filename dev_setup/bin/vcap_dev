#!/usr/bin/env ruby

require 'rubygems'
require 'erb'
require 'json'
require 'fileutils'
require 'optparse'
require File.expand_path(File.join("..", "lib", "vcap_defs"), File.dirname(__FILE__))

script_dir = File.expand_path(File.dirname(__FILE__))

# TODO: Once we integrate better with bin/vcap, this option parsing should
# become more robust
options = {}
opts = OptionParser.new do |opts|
  opts.banner = "Usage: #{$0} [--name deployment_name] [--dir cloudfoundry_home_dir] [start|stop|restart|tail|status]"
  opts.on("-n", "--name deployment_name", "Name of the deployment") do |n|
    options["name"] = n
  end
  opts.on("-d", "--dir cloud_foundry_home_dir", "Cloud foundry home directory") do |n|
    options["home"] = n
  end
end
opts.order!(ARGV)

options["name"], options["home"] = Deployment.get_deployment_target if options.empty?

if options["name"]
  puts "Targeting deployment \"#{options["name"]}\" with cloudfoundry home \"#{options["home"]}\""
else
  options["name"] = DEPLOYMENT_DEFAULT_NAME
  puts "Targeting default deployment \"#{options["name"]}\""
end

command = ARGV[0] ? ARGV.shift.downcase : nil

if command.nil? || !%w[start stop restart tail status].include?(command)
  STDERR.puts "Usage: #{$0} [-n deployment_name] [-d cloudfoundry_home_dir] [start|stop|restart|tail|status] [COMPONENT]"
    exit 1
end

deployment_config_path = Deployment.get_config_path(options["name"], options["home"])

begin
  vcap_components = JSON.parse(File.read(Deployment.get_vcap_config_file(deployment_config_path)))
  deployment_info = JSON.parse(File.read(Deployment.get_deployment_info_file(deployment_config_path)))
rescue => e
  STDERR.puts "#{e.inspect}. Could not parse deployment config files . Please check your deployment."
  exit 1
end

# select only those components that are on the command line (if any)
if !ARGV.empty? and (vcap_components["components"] & ARGV).empty?
  STDERR.puts "The component(s) specified on the command line are unknown.\nPlease specify one or more of (#{vcap_components['components'].join(' ')})"
  exit 1
end
vcap_components["components"] &= ARGV unless ARGV.empty?

unless File.exists?(File.join(deployment_info["cloudfoundry_path"], "dev_setup", "bin", "vcap"))
  puts "Cannot find vcap repo. Please specify the deployment name or the deployment home directory where to find the config file"
  exit 1
end

ruby_bin_dir = deployment_info["ruby_bin_dir"]
maven_bin_dir = deployment_info["maven_bin_dir"]
gemdir = `#{File.join(ruby_bin_dir, "gem")} environment gemdir`.split("\n")[0]
ENV["PATH"] = "#{ruby_bin_dir}:#{File.join(gemdir, "bin")}:#{maven_bin_dir}:#{ENV["PATH"]}"

if vcap_components["components"].include?("vcap_redis")
  vcap_components["components"].unshift(vcap_components["components"].delete("vcap_redis"))
end

if vcap_components["components"].include?("cloud_controller")
  puts "Setting up cloud controller environment"
  ENV["CLOUD_CONTROLLER_CONFIG"]=File.join(deployment_config_path, "cloud_controller.yml")
  ENV["RAILS_ENV"]="production"

  # Start the cloud controller component first as other components like the
  # health manager depend on it. Specifically, the health manager uses the same
  # database as the one used by the cloud controller.
  vcap_components["components"].unshift(vcap_components["components"].delete("cloud_controller"))
end

if vcap_components["components"].include?("uaa")
  puts "Setting up the uaa environment"
  ENV["CLOUD_CONTROLLER_CONFIG_PATH"]=deployment_config_path
  ENV["UAA_TOMCAT"]=File.join(deployment_config_path, "../deploy/uaa-tomcat/")
end

# Set both http_proxy and HTTP_PROXY
%w(http_proxy https_proxy no_proxy).each do |var|
  ENV[var] = ENV[var] || ENV[var.upcase] unless ENV[var.upcase].nil?
  ENV[var.upcase] = ENV[var.upcase] || ENV[var] unless ENV[var].nil?
end

def exec_cmd(cmd)
  id = fork {
    puts "Executing #{cmd}"
    exec(cmd)
  }
  pid, status = Process.waitpid2(id)
  status.exitstatus
end

ruby_binary = File.join(ruby_bin_dir, "ruby")
vcap_home = File.join(deployment_info["cloudfoundry_home"])
vcap_launch = File.join(script_dir, "vcap")

puts "Using cloudfoundry config from #{deployment_config_path}"
exec_cmd("#{ruby_binary} #{vcap_launch} #{command} #{vcap_components["components"].join(" ")} -c #{deployment_config_path} -v #{vcap_home} -l #{deployment_info["deployment_log_path"]}")
