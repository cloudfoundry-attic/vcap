
user  root root;
worker_processes  1;

error_log <%= node[:nginx][:log_home] %>/nginx_error.log debug;
pid        /var/run/nginx.pid;

events {
    worker_connections  <%= node[:nginx][:worker_connections] %>;
    use epoll;
    # multi_accept on;
}

http {
  include       mime.types;
  default_type  text/html;
  server_tokens off;

  log_format main  '$host - [$time_local] '
                   '"$request" $status $bytes_sent '
                   '"$http_referer" "$http_user_agent" '
                   '$remote_addr response_time:$upstream_response_time';

  access_log   <%= node[:nginx][:log_home] %>/nginx_main_access.log main;

  sendfile             on;
  tcp_nopush           on;
  tcp_nodelay          on;

  keepalive_timeout  75 20;

  gzip                 on;
  gzip_min_length      1250;
  gzip_buffers         16 8k;
  gzip_comp_level      2;
  gzip_proxied         any;
  gzip_types           text/plain text/css application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;
  gzip_vary            on;
  gzip_disable         "MSIE [1-6]\.(?!.*SV1)";

  client_max_body_size 256M;

  upstream router_status {
    server <%= node[:nginx][:uls_ip] %>:<%= node[:nginx][:uls_port] %>;
  }


  server {
    listen       80;
    server_name  <%= node[:deployment][:domain] %>;
    server_name_in_redirect off;

    #TODO: how to make this internal location totally transparent to outside
    location = /vcapuls {
      internal;
      # We should use rewrite_by_lua to scrub subrequest headers
      # as uls doesn't care those headers at all.
      # Given there are some exceptions to clear some headers,
      # we just leave them as is.

      proxy_set_header Connection "Keep-alive";
      proxy_pass http://unix:/tmp/router.sock:/;
    }

    location / {
      access_log   <%= node[:nginx][:log_home] %>/nginx_access.log main;
      proxy_buffering             off;
      proxy_set_header            Host $host;
      proxy_set_header            X-Real_IP $remote_addr;
      proxy_set_header            X-Forwarded_For $proxy_add_x_forwarded_for;
      proxy_redirect              off;
      proxy_connect_timeout       10;
      proxy_send_timeout          30;
      proxy_read_timeout          30;

      set $health_monitor '';
      if ($http_user_agent = "HTTP-Monitor/1.1") {
        set $health_monitor T;
      }
      if ($http_host = "") {
        set $health_monitor "${health_monitor}T";
      }
      if ($health_monitor = TT) {
        # Trigger a subrequest to sync the latest few stats of the worker to uls,
        # if we have multiple workers, there will be still few stats not synced for
        # the workers which don't get this monitor request.
        access_by_lua '
	  -- add package.path and package.cpath
	  package.path = package.path..";<%= node[:lua][:module_path] %>/?.lua"
	  package.cpath = package.cpath..";<%= node[:lua][:module_path] %>/?.so"

          local uls = require ("uls")
          local cjson = require("cjson")

          local uls_req_spec = {}
          local req_stats = uls.serialize_request_statistics()
          if req_stats then
            uls_req_spec[uls.ULS_STATS_UPDATE] = req_stats
            ngx.log(ngx.DEBUG, "monitor trigger stats syncup")
          end

          -- generate one subrequest to uls with uls_req_spec
          ngx.location.capture(
            "/vcapuls", {body = cjson.encode(uls_req_spec)}
          )
        ';

        # more_set_input_headers "Authorization: Basic <%= Base64.encode64("#{node[:nginx][:status_user]}:#{node[:nginx][:status_passwd]}").strip %>";
        rewrite ^.*$ /healthz break;
        proxy_pass                 http://router_status;
      }

      # We intend to have one "if" block to avoid the above monitor location
      # to twist with below upstream locator server handling.
      # ("if" block effectively creates a nested location and will inherit
      # all the rewrite/access phase handlers of outer location)
      if ($health_monitor != TT) {
        # Backend server address returned from uls for this request
        set $backend_addr '';
        # Request tags returned from uls for this request to catalog statistics
        set $uls_req_tags '';
        set $timestamp 0;
        set $trace '';

        access_by_lua '
	  -- add package.path and package.cpath
	  package.path = package.path..";<%= node[:lua][:module_path] %>/?.lua"
	  package.cpath = package.cpath..";<%= node[:lua][:module_path] %>/?.so"

          local uls = require ("uls")
          local cjson = require("cjson")

          if string.len(ngx.var.http_host) == 0 then
            ngx.exit(ngx.HTTP_BAD_REQUEST)
          end

          ngx.var.timestamp = ngx.time()

          local uls_req_spec = {}
          uls_req_spec[uls.ULS_HOST_QUERY] = ngx.var.http_host

          local uls_sticky_addr = uls.retrieve_vcap_sticky_addr(
                                  ngx.req.get_headers()[uls.COOKIE_HEADER])
          if uls_sticky_addr then
            uls_req_spec[uls.ULS_BACKEND_ADDR] = uls_sticky_addr
            ngx.log(ngx.DEBUG, "req sticks to backend addr:"..uls_sticky_addr)
          end

          if ngx.req.get_headers()[uls.VCAP_TRACE_HEADER] then
            ngx.var.trace = "Y"
          end

          local req_stats = uls.serialize_request_statistics()
          if req_stats then
            uls_req_spec[uls.ULS_STATS_UPDATE] = req_stats
          end

          -- generate one subrequest to uls with uls_req_spec
          local res = ngx.location.capture(
            "/vcapuls", {body = cjson.encode(uls_req_spec)}
          )

          if res.status ~= 200 then
            ngx.exit(ngx.HTTP_NOT_FOUND)
          end

          ngx.var.backend_addr = cjson.decode(res.body)[uls.ULS_BACKEND_ADDR]
          ngx.var.uls_req_tags = cjson.decode(res.body)[uls.ULS_REQEST_TAGS]
          ngx.log(ngx.DEBUG, "route request with host header:"..
                              ngx.var.http_host.." to:"..ngx.var.backend_addr)
        ';

        proxy_pass http://$backend_addr;

        # Handling response from backend servers
        header_filter_by_lua '
	  -- add package.path and package.cpath
	  package.path = package.path..";<%= node[:lua][:module_path] %>/?.lua"
	  package.cpath = package.cpath..";<%= node[:lua][:module_path] %>/?.so"

          local uls = require ("uls")

          uls.vcap_store_stats(ngx.var.uls_req_tags, ngx.status,
                                (ngx.time() - ngx.var.timestamp) * 1000)

          if ngx.var.trace == "Y" then
            ngx.header[uls.VCAP_BACKEND_HEADER] = ngx.var.backend_addr
          end

          local cookies = ngx.header.set_cookie
          if not cookies then return end

          if type(cookies) ~= "table" then cookies = {cookies} end
          local sticky = false
          for _, val in ipairs(cookies) do
            local i, j = string.find(val:upper(), uls.STICKY_SESSIONS)
            if i then
              sticky = true
              break
            end
          end
          if not sticky then return end

          local vcap_cookie = uls.VCAP_SESSION_ID.."="..
                              uls.encode_session_cookie(ngx.var.backend_addr)
          ngx.log(ngx.DEBUG, "generate cookie:"..vcap_cookie.." for resp from:"..
                  ngx.var.backend_addr)
          table.insert(cookies, vcap_cookie)
          -- ngx.header.set_cookie incorrectly makes header to "set-cookie",
          -- so workaround to set "Set-Cookie" directly
          -- ngx.header.set_cookie = cookies
          ngx.header["Set-Cookie"] = cookies
        ';
      }
    }
  }
}
