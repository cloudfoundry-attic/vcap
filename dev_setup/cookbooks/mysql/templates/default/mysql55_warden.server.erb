#!/bin/bash
# Copyright Abandoned 1996 TCX DataKonsult AB & Monty Program KB & Detron HB
# This file is public domain and comes with NO WARRANTY of any kind
#
# GIANT HACK for BOSH: this is just a trimmed down version of the ugly hack included
# in the mysql distribution - tailored just enough to be usable with BOSH.

LD_LIBRARY_PATH=<%= node[:mysql][:path] %>/<%= node[:mysql][:default_version] %>/lib/mysql
export LD_LIBRARY_PATH

basedir=<%= node[:mysql][:path] %>/<%= node[:mysql][:default_version] %>
datadir=/var/vcap/store/mysql

# Default value, in seconds, afterwhich the script should timeout waiting
# for server start/stop.
# 0 means don't wait at all
# Negative numbers mean to wait indefinitely
default_timeout=900

# The following variables are only set for letting mysql.server find things.

# Set some defaults
pid_file=/var/vcap/sys/run/mysqld/mysqld.pid
server_pid_file=/var/vcap/sys/run/mysqld/mysqld.pid
use_mysqld_safe=1
user=vcap

bindir="$basedir/bin"
sbindir="$basedir/sbin"
libexecdir="$basedir/libexec"

# datadir_set is used to determine if datadir was set (and so should be
# *not* set inside of the --basedir= handler.)
datadir_set=

# Use LSB init script functions for printing messages, if possible
#
lsb_functions="/lib/lsb/init-functions"
if test -f $lsb_functions ; then
  . $lsb_functions
else
  log_success_msg()
  {
    echo " SUCCESS! $@"
  }
  log_failure_msg()
  {
    echo " ERROR! $@"
  }
fi

PATH=/sbin:/usr/sbin:/bin:/usr/bin:$basedir/bin
export PATH

mode=$1    # start or stop
shift
defaults=$1
shift
timeout=${1:-$default_timeout}
shift
other_args="$*"

wait_for_pid () {
  verb="$1"
  manager_pid="$2"  # process ID of the program operating on the pid-file
  i=0
  avoid_race_condition="by checking again"
  while test $i -ne $timeout ; do

    case "$verb" in
      'created')
        # wait for a PID-file to pop into existence.
        test -s $pid_file && i='' && break
        ;;
      'removed')
        # wait for this PID-file to disappear
        test ! -s $pid_file && i='' && break
        ;;
      *)
        echo "wait_for_pid () usage: wait_for_pid created|removed manager_pid"
        exit 1
        ;;
    esac

    # if manager isn't running, then pid-file will never be updated
    if test -n "$manager_pid"; then
      if kill -0 "$manager_pid" 2>/dev/null; then
        :  # the manager still runs
      else
        # The manager may have exited between the last pid-file check and now.
        if test -n "$avoid_race_condition"; then
          avoid_race_condition=""
          continue  # Check again.
        fi

        # there's nothing that will affect the file.
        log_failure_msg "Manager of pid-file quit without updating file."
        return 1  # not waiting any more.
      fi
    fi

    echo $echo_n ".$echo_c"
    i=`expr $i + 1`
    sleep 1
  done

  if test -z "$i" ; then
    log_success_msg
    return 0
  else
    log_failure_msg
    return 1
  fi
}

case "$mode" in
  'start')
    # Start daemon
    # Safeguard (relative paths, core dumps..)
    echo "Starting Percona Server"

    cd $basedir
    pid_file=$server_pid_file
    $bindir/mysqld_safe --defaults-file=$defaults --datadir=$datadir --pid-file=$server_pid_file $other_args >/dev/null 2>&1 &
    wait_for_pid created $!; return_value=$?

    exit $return_value
    ;;

  'stop')
    # Stop daemon. We use a signal here to avoid having to know the
    # root password.

    pid_file=$server_pid_file

    if test -s "$pid_file"
    then
      mysqld_pid=`cat $pid_file`

      if (kill -0 $mysqld_pid 2>/dev/null)
      then
        echo $echo_n "Shutting down MySQL"
        defaultsdir=`dirname ${defaults}`
        if test -f $defaultsdir/../bin/my55.shutdown; then
          echo "Gracefully shutting down MySQL"
          $defaultsdir/../bin/my55.shutdown; return_value=$?
          if [ $return_value -ne 0 ]; then
            echo "Gracefully shut down MySQL failed, kill it"
            kill $mysqld_pid
            wait_for_pid removed "$mysqld_pid"; return_value=$?
          fi
        else
          kill $mysqld_pid
          wait_for_pid removed "$mysqld_pid"; return_value=$?
        fi
      else
        log_failure_msg "MySQL server process #$mysqld_pid is not running!"
        rm $pid_file
      fi

      exit $return_value
    else
      log_failure_msg "MySQL manager or server PID file could not be found!"
    fi
    ;;

  'restart')
    # Stop the service and regardless of whether it was
    # running or not, start it again.
    if $0 stop  $defaults ; then
      $0 start $defaults
    else
      log_failure_msg "Failed to stop running server, so refusing to try to start."
      exit 1
    fi
    ;;

  'reload'|'force-reload')
    if test -s "$server_pid_file" ; then
      read mysqld_pid <  $server_pid_file
      kill -HUP $mysqld_pid && log_success_msg "Reloading service MySQL"
      touch $server_pid_file
    else
      log_failure_msg "MySQL PID file could not be found!"
      exit 1
    fi
    ;;
  'status')
    # First, check to see if pid file exists
    if test -s "$server_pid_file" ; then
      read mysqld_pid < $server_pid_file
      if kill -0 $mysqld_pid 2>/dev/null ; then
        log_success_msg "MySQL running ($mysqld_pid)"
        exit 0
      else
        log_failure_msg "MySQL is not running, but PID file exists"
        exit 1
      fi
    else
      # Try to find appropriate mysqld process
      mysqld_pid=`pidof $libexecdir/mysqld`
      if test -z $mysqld_pid ; then
        if test "$use_mysqld_safe" = "0" ; then
          lockfile=/var/lock/subsys/mysqlmanager
        else
          lockfile=/var/lock/subsys/mysql
        fi
        if test -f $lockfile ; then
          log_failure_msg "MySQL is not running, but lock exists"
          exit 2
        fi
        log_failure_msg "MySQL is not running"
        exit 3
      else
        log_failure_msg "MySQL is running but PID file could not be found"
        exit 4
      fi
    fi
    ;;
    *)
      # usage
      echo "Usage: $0  {start|stop|restart|reload|force-reload|status}  [ MySQL server options ]"
      exit 1
    ;;
esac

exit 0
